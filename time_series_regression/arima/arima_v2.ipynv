{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%matplotlib inline\n",
    "\n",
    "import logging\n",
    "import warnings\n",
    "from pathlib import Path \n",
    "\n",
    "import math\n",
    "import random\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(levelname)s: %(message)s')\n",
    "\n",
    "# ------------- Global Variable -------------\n",
    "data_root = Path(r'data')\n",
    "SEED =2021"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def seed_everything(seed=2021):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    # torch.manual_seed(seed)\n",
    "    # torch.cuda.manual_seed(seed)\n",
    "    # torch.backends.cudnn.deterministic = True\n",
    "\n",
    "def calc_mape(y_true, y_pred):\n",
    "    ''' 平均绝对百分比误差 '''\n",
    "    y_true, y_pred = np.array(y_true), np.array(y_pred)\n",
    "    return np.mean(np.abs((y_true-y_pred)/y_true)) * 100\n",
    "\n",
    "seed_everything(SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-02-02 22:26:06,478 INFO: data shape: (1414, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>c</th>\n",
       "      <th>o</th>\n",
       "      <th>h</th>\n",
       "      <th>l</th>\n",
       "      <th>p</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1413</th>\n",
       "      <td>2015-09-01</td>\n",
       "      <td>6.3645</td>\n",
       "      <td>6.3775</td>\n",
       "      <td>6.3775</td>\n",
       "      <td>6.3635</td>\n",
       "      <td>-0.0019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1412</th>\n",
       "      <td>2015-09-02</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3656</td>\n",
       "      <td>6.3668</td>\n",
       "      <td>6.3555</td>\n",
       "      <td>-0.0014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1411</th>\n",
       "      <td>2015-09-03</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1410</th>\n",
       "      <td>2015-09-04</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>6.3559</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1409</th>\n",
       "      <td>2015-09-07</td>\n",
       "      <td>6.3659</td>\n",
       "      <td>6.3574</td>\n",
       "      <td>6.3704</td>\n",
       "      <td>6.3560</td>\n",
       "      <td>0.0016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date       c       o       h       l       p\n",
       "1413 2015-09-01  6.3645  6.3775  6.3775  6.3635 -0.0019\n",
       "1412 2015-09-02  6.3559  6.3656  6.3668  6.3555 -0.0014\n",
       "1411 2015-09-03  6.3559  6.3559  6.3559  6.3559  0.0000\n",
       "1410 2015-09-04  6.3559  6.3559  6.3559  6.3559  0.0000\n",
       "1409 2015-09-07  6.3659  6.3574  6.3704  6.3560  0.0016"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Prepare Data\n",
    "\n",
    "df = pd.read_csv(f'{data_root}/ak_usd-cny.csv')\n",
    "df['Date'] = pd.to_datetime(df['Date'], format=r'%Y-%m-%d')\n",
    "df.columns = [str(x).lower().replace(' ', '_') for x in df.columns] # Change all column headings to be lower case, and remove spacing\n",
    "df.sort_values(by='date', inplace=True)\n",
    "logging.info(f\"data shape: {df.shape}\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 需要分析的时间序列\n",
    "ts_series = df.c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def arima_regression(ts, order=(1,1,1)):\n",
    "    p, d, q = order\n",
    "\n",
    "    training_data, test_data = ts[0: int(len(ts)*0.7)], ts[int(len(ts)*0.7):]\n",
    "\n",
    "    history = [x for x in training_data]\n",
    "    model_predictions = []\n",
    "\n",
    "    # To this end, we re-create the ARIMA model after each new observation is received.\n",
    "    for time_point in range(len(test_data)):\n",
    "        model = ARIMA(history[-500:], order=(p, d, q))\n",
    "        model_fit = model.fit(disp=0)\n",
    "        output = model_fit.forecast()\n",
    "        yhat = output[0]\n",
    "        model_predictions.append(yhat)\n",
    "        true_test_value = test_data[time_point]\n",
    "        history.append(true_test_value)\n",
    "\n",
    "    mse = mean_squared_error(test_data, model_predictions)\n",
    "    return mse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "模型调参"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 设置调参所需全局参数\n",
    "ds = ts_series  # 数据集\n",
    "\n",
    "def optim_arima(p_value, d_value, q_value):\n",
    "    order = (int(round(p_value)), int(round(d_value)), int(round(q_value)))\n",
    "    try:\n",
    "        mse = arima_regression(ds, order)\n",
    "    except:\n",
    "        mse = 1000\n",
    "    return np.exp(-mse)  # MSE越小越好, e^(-mse)越大越好"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   iter    |  target   |  d_value  |  p_value  |  q_value  |\n",
      "-------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-02-02 22:26:26,193 INFO: NumExpr defaulting to 2 threads.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| \u001b[0m 1       \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 1.477   \u001b[0m | \u001b[0m 2.888   \u001b[0m | \u001b[0m 6.283   \u001b[0m |\n",
      "| \u001b[95m 2       \u001b[0m | \u001b[95m 0.9145  \u001b[0m | \u001b[95m 1.427   \u001b[0m | \u001b[95m 1.395   \u001b[0m | \u001b[95m 4.583   \u001b[0m |\n",
      "| \u001b[0m 3       \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 1.194   \u001b[0m | \u001b[0m 4.731   \u001b[0m | \u001b[0m 7.944   \u001b[0m |\n",
      "| \u001b[0m 4       \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 1.562   \u001b[0m | \u001b[0m 8.142   \u001b[0m | \u001b[0m 9.347   \u001b[0m |\n",
      "| \u001b[0m 5       \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 1.79    \u001b[0m | \u001b[0m 3.003   \u001b[0m | \u001b[0m 6.989   \u001b[0m |\n",
      "| \u001b[95m 6       \u001b[0m | \u001b[95m 0.9145  \u001b[0m | \u001b[95m 1.405   \u001b[0m | \u001b[95m 1.0     \u001b[0m | \u001b[95m 3.535   \u001b[0m |\n",
      "| \u001b[0m 7       \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 2.946   \u001b[0m | \u001b[0m 2.306   \u001b[0m |\n",
      "| \u001b[0m 8       \u001b[0m | \u001b[0m 0.9143  \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 4.344   \u001b[0m |\n",
      "| \u001b[0m 9       \u001b[0m | \u001b[0m 0.9145  \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 1.0     \u001b[0m |\n",
      "| \u001b[0m 10      \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 10.0    \u001b[0m | \u001b[0m 3.329   \u001b[0m |\n",
      "| \u001b[0m 11      \u001b[0m | \u001b[0m 0.9145  \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 7.955   \u001b[0m | \u001b[0m 1.0     \u001b[0m |\n",
      "| \u001b[0m 12      \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 10.0    \u001b[0m |\n",
      "| \u001b[0m 13      \u001b[0m | \u001b[0m 0.9143  \u001b[0m | \u001b[0m 1.971   \u001b[0m | \u001b[0m 8.928   \u001b[0m | \u001b[0m 1.019   \u001b[0m |\n",
      "| \u001b[0m 14      \u001b[0m | \u001b[0m 0.9143  \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 6.55    \u001b[0m | \u001b[0m 1.0     \u001b[0m |\n",
      "| \u001b[0m 15      \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 6.649   \u001b[0m | \u001b[0m 2.742   \u001b[0m |\n",
      "| \u001b[95m 16      \u001b[0m | \u001b[95m 0.9146  \u001b[0m | \u001b[95m 1.0     \u001b[0m | \u001b[95m 1.0     \u001b[0m | \u001b[95m 1.0     \u001b[0m |\n",
      "| \u001b[0m 17      \u001b[0m | \u001b[0m 0.9145  \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 5.563   \u001b[0m |\n",
      "| \u001b[0m 18      \u001b[0m | \u001b[0m 0.9143  \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 7.648   \u001b[0m | \u001b[0m 1.0     \u001b[0m |\n",
      "| \u001b[0m 19      \u001b[0m | \u001b[0m 0.9145  \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 4.436   \u001b[0m |\n",
      "| \u001b[0m 20      \u001b[0m | \u001b[0m 0.9143  \u001b[0m | \u001b[0m 1.982   \u001b[0m | \u001b[0m 1.137   \u001b[0m | \u001b[0m 1.013   \u001b[0m |\n",
      "| \u001b[0m 21      \u001b[0m | \u001b[0m 0.0     \u001b[0m | \u001b[0m 2.0     \u001b[0m | \u001b[0m 1.0     \u001b[0m | \u001b[0m 2.177   \u001b[0m |\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "from bayes_opt import BayesianOptimization\n",
    "\n",
    "model_params = {\n",
    "    'p_value': (1, 10),\n",
    "    'd_value': (1, 2),\n",
    "    'q_value': (1, 10),\n",
    "}\n",
    "\n",
    "bayes_optim_arima = BayesianOptimization(optim_arima, model_params)\n",
    "bayes_optim_arima.maximize(n_iter=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bayes_optim_lstm.max"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "基于最优参数的模型测试"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
